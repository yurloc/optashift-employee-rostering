// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rotation Page should render correctly when creating a new shift template via button 1`] = `
<Fragment>
  <Level
    gutter="sm"
    style={
      Object {
        "backgroundColor": "var(--pf-global--BackgroundColor--100)",
        "height": "60px",
        "padding": "5px 5px 5px 5px",
      }
    }
  >
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <TypeaheadSelectInput
        aria-label="Select Spot"
        emptyText="Trans(i18nKey=selectSpot)"
        noClearButton={true}
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
            Object {
              "id": 111,
              "name": "New Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
        value={
          Object {
            "id": 2,
            "name": "Spot",
            "requiredSkillSet": Array [
              Object {
                "id": 3,
                "name": "Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
      />
      <Pagination
        itemCount={7}
        onSetPage={[Function]}
        page={1}
        perPage={7}
        perPageOptions={Array []}
        titles={
          Object {
            "currPage": "Trans(i18nKey=currentWeek)",
            "items": "Trans(i18nKey=days)",
            "itemsPerPage": "Trans(i18nKey=weekNum)",
            "optionsToggle": "Trans(i18nKey=select)",
            "page": "Trans(i18nKey=week)",
            "paginationTitle": "Trans(i18nKey=weekSelect)",
            "perPageSuffix": "Trans(i18nKey=weekNum)",
            "toFirstPage": "Trans(i18nKey=gotoFirstWeek)",
            "toLastPage": "Trans(i18nKey=gotoLastWeek)",
            "toNextPage": "Trans(i18nKey=gotoNextWeek)",
            "toPreviousPage": "Trans(i18nKey=gotoPreviousWeek)",
          }
        }
      />
    </LevelItem>
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <Button
        aria-label="Create Shift Template"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Trans(i18nKey=createShiftTemplate)
      </Button>
    </LevelItem>
  </Level>
  <Component
    aria-label="Edit Shift Template"
    isOpen={true}
    onClose={[Function]}
    onDelete={[Function]}
    onSave={[Function]}
  />
  <Schedule
    dateFormat={[Function]}
    dayStyle={[Function]}
    endAccessor={[Function]}
    endDate={2018-01-07T00:00:00.000Z}
    eventComponent={[Function]}
    eventStyle={[Function]}
    events={
      Array [
        Object {
          "end": 2018-01-01T17:00:00.000Z,
          "shiftTemplate": Object {
            "durationBetweenRotationStartAndTemplateStart": "P1DT9H",
            "id": 1,
            "rotationEmployee": Object {
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
            "shiftTemplateDuration": "PT8H",
            "spot": Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
            "tenantId": 0,
            "version": 0,
          },
          "start": 2018-01-01T09:00:00.000Z,
        },
      ]
    }
    key="2"
    onAddEvent={[Function]}
    onUpdateEvent={[Function]}
    popoverBody={[Function]}
    popoverHeader={[Function]}
    startAccessor={[Function]}
    startDate={2017-12-31T00:00:00.000Z}
    titleAccessor={[Function]}
    wrapperStyle={[Function]}
  />
</Fragment>
`;

exports[`Rotation Page should render correctly when loaded 1`] = `
<Fragment>
  <Level
    gutter="sm"
    style={
      Object {
        "backgroundColor": "var(--pf-global--BackgroundColor--100)",
        "height": "60px",
        "padding": "5px 5px 5px 5px",
      }
    }
  >
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <TypeaheadSelectInput
        aria-label="Select Spot"
        emptyText="Trans(i18nKey=selectSpot)"
        noClearButton={true}
        onChange={[Function]}
        optionToStringMap={[Function]}
        options={
          Array [
            Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
            Object {
              "id": 111,
              "name": "New Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
          ]
        }
        value={
          Object {
            "id": 2,
            "name": "Spot",
            "requiredSkillSet": Array [
              Object {
                "id": 3,
                "name": "Skill",
                "tenantId": 0,
                "version": 0,
              },
            ],
            "tenantId": 0,
            "version": 0,
          }
        }
      />
      <Pagination
        itemCount={7}
        onSetPage={[Function]}
        page={1}
        perPage={7}
        perPageOptions={Array []}
        titles={
          Object {
            "currPage": "Trans(i18nKey=currentWeek)",
            "items": "Trans(i18nKey=days)",
            "itemsPerPage": "Trans(i18nKey=weekNum)",
            "optionsToggle": "Trans(i18nKey=select)",
            "page": "Trans(i18nKey=week)",
            "paginationTitle": "Trans(i18nKey=weekSelect)",
            "perPageSuffix": "Trans(i18nKey=weekNum)",
            "toFirstPage": "Trans(i18nKey=gotoFirstWeek)",
            "toLastPage": "Trans(i18nKey=gotoLastWeek)",
            "toNextPage": "Trans(i18nKey=gotoNextWeek)",
            "toPreviousPage": "Trans(i18nKey=gotoPreviousWeek)",
          }
        }
      />
    </LevelItem>
    <LevelItem
      style={
        Object {
          "display": "flex",
        }
      }
    >
      <Button
        aria-label="Create Shift Template"
        onClick={[Function]}
        style={
          Object {
            "margin": "5px",
          }
        }
      >
        Trans(i18nKey=createShiftTemplate)
      </Button>
    </LevelItem>
  </Level>
  <Component
    aria-label="Edit Shift Template"
    isOpen={false}
    onClose={[Function]}
    onDelete={[Function]}
    onSave={[Function]}
  />
  <Schedule
    dateFormat={[Function]}
    dayStyle={[Function]}
    endAccessor={[Function]}
    endDate={2018-01-07T00:00:00.000Z}
    eventComponent={[Function]}
    eventStyle={[Function]}
    events={
      Array [
        Object {
          "end": 2018-01-01T17:00:00.000Z,
          "shiftTemplate": Object {
            "durationBetweenRotationStartAndTemplateStart": "P1DT9H",
            "id": 1,
            "rotationEmployee": Object {
              "contract": Object {
                "id": 5,
                "maximumMinutesPerDay": 10,
                "maximumMinutesPerMonth": 500,
                "maximumMinutesPerWeek": 70,
                "maximumMinutesPerYear": 6000,
                "name": "Basic Contract",
                "tenantId": 0,
                "version": 0,
              },
              "id": 4,
              "name": "Employee 1",
              "skillProficiencySet": Array [
                Object {
                  "id": 6,
                  "name": "Not Required Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
            "shiftTemplateDuration": "PT8H",
            "spot": Object {
              "id": 2,
              "name": "Spot",
              "requiredSkillSet": Array [
                Object {
                  "id": 3,
                  "name": "Skill",
                  "tenantId": 0,
                  "version": 0,
                },
              ],
              "tenantId": 0,
              "version": 0,
            },
            "tenantId": 0,
            "version": 0,
          },
          "start": 2018-01-01T09:00:00.000Z,
        },
      ]
    }
    key="2"
    onAddEvent={[Function]}
    onUpdateEvent={[Function]}
    popoverBody={[Function]}
    popoverHeader={[Function]}
    startAccessor={[Function]}
    startDate={2017-12-31T00:00:00.000Z}
    titleAccessor={[Function]}
    wrapperStyle={[Function]}
  />
</Fragment>
`;

exports[`Rotation Page should render correctly when loading 1`] = `
<EmptyState
  variant="full"
>
  <EmptyStateIcon
    icon={[Function]}
  />
  <Trans
    components={
      Array [
        <Title
          headingLevel="h5"
          size="lg"
        />,
        <EmptyStateBody />,
        <Button
          aria-label="Spots Page"
          onClick={[Function]}
          variant="primary"
        />,
      ]
    }
    i18nKey="noSpots"
    t={[MockFunction]}
  />
</EmptyState>
`;
